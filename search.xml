<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[微信小程序（applet of WeChat）]]></title>
    <url>%2F2018%2F06%2F03%2Fweixin%2Fwechat-progress%2F</url>
    <content type="text"><![CDATA[什么是微信小程序 微信小程序，简称小程序，是一种不需要下载安装就可以使用的应用程序，它实现了应用“触手可及”的梦想，用户扫一扫或搜索就可以打开应用 特点： 免安装，操作更接近原生APP，必须是在微信中打开 小程序有哪些宣传方式 小程序搜索入口 附近的小程序 扫一扫，长按识别小程序码 好友分享，群分享 关联公众号 第三方的小程序应用商店 小程序之间可以互相跳转 小程序开发流程注册小程序 — 代码开发 — 提审 — 上线 如何注册小程序 通过公众号注册 进入微信小程序官网注册 https://mp.weixin.qq.com/ 代码结构 page的生命周期配置：https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[ajax学习]]></title>
    <url>%2F2018%2F05%2F28%2Fjavascript%2Fajax%D1%A7%CF%B0%2F</url>
    <content type="text"><![CDATA[AJAX概念 AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。AJAX 不是新的编程语言，而是一种使用现有标准的新方法。AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术 什么是 AJAX ？AJAX = 异步 JavaScript 和 XML。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。 Google Suggest在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。 AJAX - 创建 XMLHttpRequest 对象 XMLHttpRequest 是 AJAX 的基础。 XMLHttpRequest 对象 所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。 XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 创建 XMLHttpRequest 对象 所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。 创建 XMLHttpRequest 对象的语法： variable=new XMLHttpRequest(); 老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象： variable=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); 为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ： var xmlhttp; if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); } else {// code for IE6, IE5 xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); }]]></content>
      <tags>
        <tag>前端js学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用工具类的封装（javascript）]]></title>
    <url>%2F2018%2F05%2F23%2Fjavascript%2Fjs%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[本文转载过来作者：cd-dongzi链接：https://juejin.im/post/5a7523af5188257a7d6e028e来源：掘金 在工作中经常用到这些工具类的封装 Javascript type 类型判断isString (o) { //是否字符串 return Object.prototype.toString.call(o).slice(8, -1) === &apos;String&apos; } isNumber (o) { //是否数字 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Number&apos; } isBoolean (o) { //是否boolean return Object.prototype.toString.call(o).slice(8, -1) === &apos;Boolean&apos; } isFunction (o) { //是否函数 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Function&apos; } isNull (o) { //是否为null return Object.prototype.toString.call(o).slice(8, -1) === &apos;Null&apos; } isUndefined (o) { //是否undefined return Object.prototype.toString.call(o).slice(8, -1) === &apos;Undefined&apos; } isObj (o) { //是否对象 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Object&apos; } isArray (o) { //是否数组 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Array&apos; } isDate (o) { //是否时间 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Date&apos; } isRegExp (o) { //是否正则 return Object.prototype.toString.call(o).slice(8, -1) === &apos;RegExp&apos; } isError (o) { //是否错误对象 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Error&apos; } isSymbol (o) { //是否Symbol函数 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Symbol&apos; } isPromise (o) { //是否Promise对象 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Promise&apos; } isSet (o) { //是否Set对象 return Object.prototype.toString.call(o).slice(8, -1) === &apos;Set&apos; } isFalse (o) { if (!o || o === &apos;null&apos; || o === &apos;undefined&apos; || o === &apos;false&apos; || o === &apos;NaN&apos;) return true return false } isTrue (o) { return !this.isFalse(o) } isIos () { var u = navigator.userAgent; if (u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1) {//安卓手机 // return &quot;Android&quot;; return false } else if (u.indexOf(&apos;iPhone&apos;) &gt; -1) {//苹果手机 // return &quot;iPhone&quot;; return true } else if (u.indexOf(&apos;iPad&apos;) &gt; -1) {//iPad // return &quot;iPad&quot;; return false } else if (u.indexOf(&apos;Windows Phone&apos;) &gt; -1) {//winphone手机 // return &quot;Windows Phone&quot;; return false }else{ return false } } isPC () { //是否为PC端 var userAgentInfo = navigator.userAgent; var Agents = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;]; var flag = true; for (var v = 0; v &lt; Agents.length; v++) { if (userAgentInfo.indexOf(Agents[v]) &gt; 0) { flag = false; break; } } return flag; } browserType(){ var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串 var isOpera = userAgent.indexOf(&quot;Opera&quot;) &gt; -1; //判断是否Opera浏览器 var isIE = userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1 &amp;&amp; !isOpera; //判断是否IE浏览器 var isIE11 = userAgent.indexOf(&apos;Trident&apos;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;rv:11.0&quot;) &gt; -1; var isEdge = userAgent.indexOf(&quot;Edge&quot;) &gt; -1 &amp;&amp; !isIE; //判断是否IE的Edge浏览器 var isFF = userAgent.indexOf(&quot;Firefox&quot;) &gt; -1; //判断是否Firefox浏览器 var isSafari = userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) == -1; //判断是否Safari浏览器 var isChrome = userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Safari&quot;) &gt; -1; //判断Chrome浏览器 if (isIE) { var reIE = new RegExp(&quot;MSIE (\\d+\\.\\d+);&quot;); reIE.test(userAgent); var fIEVersion = parseFloat(RegExp[&quot;$1&quot;]); if(fIEVersion == 7) return &quot;IE7&quot; else if(fIEVersion == 8) return &quot;IE8&quot;; else if(fIEVersion == 9) return &quot;IE9&quot;; else if(fIEVersion == 10) return &quot;IE10&quot;; else return &quot;IE7以下&quot;//IE版本过低 } if (isIE11) return &apos;IE11&apos;; if (isEdge) return &quot;Edge&quot;; if (isFF) return &quot;FF&quot;; if (isOpera) return &quot;Opera&quot;; if (isSafari) return &quot;Safari&quot;; if (isChrome) return &quot;Chrome&quot;; } checkStr (str, type) { switch (type) { case &apos;phone&apos;: //手机号码 return /^1[3|4|5|6|7|8|9][0-9]{9}$/.test(str); case &apos;tel&apos;: //座机 return /^(0\d{2,3}-\d{7,8})(-\d{1,4})?$/.test(str); case &apos;card&apos;: //身份证 return /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/.test(str); case &apos;pwd&apos;: //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线 return /^[a-zA-Z]\w{5,17}$/.test(str) case &apos;postal&apos;: //邮政编码 return /[1-9]\d{5}(?!\d)/.test(str); case &apos;QQ&apos;: //QQ号 return /^[1-9][0-9]{4,9}$/.test(str); case &apos;email&apos;: //邮箱 return /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/.test(str); case &apos;money&apos;: //金额(小数点2位) return /^\d*(?:\.\d{0,2})?$/.test(str); case &apos;URL&apos;: //网址 return /(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/.test(str) case &apos;IP&apos;: //IP return /((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/.test(str); case &apos;date&apos;: //日期时间 return /^(\d{4})\-(\d{2})\-(\d{2}) (\d{2})(?:\:\d{2}|:(\d{2}):(\d{2}))$/.test(str) || /^(\d{4})\-(\d{2})\-(\d{2})$/.test(str) case &apos;number&apos;: //数字 return /^[0-9]$/.test(str); case &apos;english&apos;: //英文 return /^[a-zA-Z]+$/.test(str); case &apos;chinese&apos;: //中文 return /^[\u4E00-\u9FA5]+$/.test(str); case &apos;lower&apos;: //小写 return /^[a-z]+$/.test(str); case &apos;upper&apos;: //大写 return /^[A-Z]+$/.test(str); case &apos;HTML&apos;: //HTML标记 return /&lt;(&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|[^&apos;&quot;&gt;])*&gt;/.test(str); default: return true; } // 严格的身份证校验 isCardID(sId) { if (!/(^\d{15}$)|(^\d{17}(\d|X|x)$)/.test(sId)) { alert(&apos;你输入的身份证长度或格式错误&apos;) return false } //身份证城市 var aCity={11:&quot;北京&quot;,12:&quot;天津&quot;,13:&quot;河北&quot;,14:&quot;山西&quot;,15:&quot;内蒙古&quot;,21:&quot;辽宁&quot;,22:&quot;吉林&quot;,23:&quot;黑龙江&quot;,31:&quot;上海&quot;,32:&quot;江苏&quot;,33:&quot;浙江&quot;,34:&quot;安徽&quot;,35:&quot;福建&quot;,36:&quot;江西&quot;,37:&quot;山东&quot;,41:&quot;河南&quot;,42:&quot;湖北&quot;,43:&quot;湖南&quot;,44:&quot;广东&quot;,45:&quot;广西&quot;,46:&quot;海南&quot;,50:&quot;重庆&quot;,51:&quot;四川&quot;,52:&quot;贵州&quot;,53:&quot;云南&quot;,54:&quot;西藏&quot;,61:&quot;陕西&quot;,62:&quot;甘肃&quot;,63:&quot;青海&quot;,64:&quot;宁夏&quot;,65:&quot;新疆&quot;,71:&quot;台湾&quot;,81:&quot;香港&quot;,82:&quot;澳门&quot;,91:&quot;国外&quot;}; if(!aCity[parseInt(sId.substr(0,2))]) { alert(&apos;你的身份证地区非法&apos;) return false } // 出生日期验证 var sBirthday=(sId.substr(6,4)+&quot;-&quot;+Number(sId.substr(10,2))+&quot;-&quot;+Number(sId.substr(12,2))).replace(/-/g,&quot;/&quot;), d = new Date(sBirthday) if(sBirthday != (d.getFullYear()+&quot;/&quot;+ (d.getMonth()+1) + &quot;/&quot; + d.getDate())) { alert(&apos;身份证上的出生日期非法&apos;) return false } // 身份证号码校验 var sum = 0, weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2], codes = &quot;10X98765432&quot; for (var i = 0; i &lt; sId.length - 1; i++) { sum += sId[i] * weights[i]; } var last = codes[sum % 11]; //计算出来的最后一位身份证号码 if (sId[sId.length-1] != last) { alert(&apos;你输入的身份证号非法&apos;) return false } return true } } Date/** * 格式化时间 * * @param {time} 时间 * @param {cFormat} 格式 * @return {String} 字符串 * * @example formatTime(&apos;2018-1-29&apos;, &apos;{y}/{m}/{d} {h}:{i}:{s}&apos;) // -&gt; 2018/01/29 00:00:00 */ formatTime(time, cFormat) { if (arguments.length === 0) return null if ((time + &apos;&apos;).length === 10) { time = +time * 1000 } var format = cFormat || &apos;{y}-{m}-{d} {h}:{i}:{s}&apos;, date if (typeof time === &apos;object&apos;) { date = time } else { date = new Date(time) } var formatObj = { y: date.getFullYear(), m: date.getMonth() + 1, d: date.getDate(), h: date.getHours(), i: date.getMinutes(), s: date.getSeconds(), a: date.getDay() } var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) =&gt; { var value = formatObj[key] if (key === &apos;a&apos;) return [&apos;一&apos;, &apos;二&apos;, &apos;三&apos;, &apos;四&apos;, &apos;五&apos;, &apos;六&apos;, &apos;日&apos;][value - 1] if (result.length &gt; 0 &amp;&amp; value &lt; 10) { value = &apos;0&apos; + value } return value || 0 }) return time_str } /** * 返回指定长度的月份集合 * * @param {time} 时间 * @param {len} 长度 * @param {direction} 方向： 1: 前几个月; 2: 后几个月; 3:前后几个月 默认 3 * @return {Array} 数组 * * @example getMonths(&apos;2018-1-29&apos;, 6, 1) // -&gt; [&quot;2018-1&quot;, &quot;2017-12&quot;, &quot;2017-11&quot;, &quot;2017-10&quot;, &quot;2017-9&quot;, &quot;2017-8&quot;, &quot;2017-7&quot;] */ getMonths(time, len, direction) { var mm = new Date(time).getMonth(), yy = new Date(time).getFullYear(), direction = isNaN(direction) ? 3 : direction, index = mm; var cutMonth = function(index) { if ( index &lt;= len &amp;&amp; index &gt;= -len) { return direction === 1 ? formatPre(index).concat(cutMonth(++index)): direction === 2 ? formatNext(index).concat(cutMonth(++index)):formatCurr(index).concat(cutMonth(++index)) } return [] } var formatNext = function(i) { var y = Math.floor(i/12), m = i%12 return [yy+y + &apos;-&apos; + (m+1)] } var formatPre = function(i) { var y = Math.ceil(i/12), m = i%12 m = m===0 ? 12 : m return [yy-y + &apos;-&apos; + (13 - m)] } var formatCurr = function(i) { var y = Math.floor(i/12), yNext = Math.ceil(i/12), m = i%12, mNext = m===0 ? 12 : m return [yy-yNext + &apos;-&apos; + (13 - mNext),yy+y + &apos;-&apos; + (m+1)] } // 数组去重 var unique = function(arr) { if ( Array.hasOwnProperty(&apos;from&apos;) ) { return Array.from(new Set(arr)); }else{ var n = {},r=[]; for(var i = 0; i &lt; arr.length; i++){ if (!n[arr[i]]){ n[arr[i]] = true; r.push(arr[i]); } } return r; } } return direction !== 3 ? cutMonth(index) : unique(cutMonth(index).sort(function(t1, t2){ return new Date(t1).getTime() - new Date(t2).getTime() })) } /** * 返回指定长度的天数集合 * * @param {time} 时间 * @param {len} 长度 * @param {direction} 方向： 1: 前几天; 2: 后几天; 3:前后几天 默认 3 * @return {Array} 数组 * * @example date.getDays(&apos;2018-1-29&apos;, 6) // -&gt; [&quot;2018-1-26&quot;, &quot;2018-1-27&quot;, &quot;2018-1-28&quot;, &quot;2018-1-29&quot;, &quot;2018-1-30&quot;, &quot;2018-1-31&quot;, &quot;2018-2-1&quot;] */ getDays(time, len, diretion) { var tt = new Date(time) var getDay = function(day) { var t = new Date(time) t.setDate(t.getDate() + day) var m = t.getMonth()+1 return t.getFullYear()+&apos;-&apos;+m+&apos;-&apos;+t.getDate() } var arr = [] if (diretion === 1) { for (var i = 1; i &lt;= len; i++) { arr.unshift(getDay(-i)) } }else if(diretion === 2) { for (var i = 1; i &lt;= len; i++) { arr.push(getDay(i)) } }else { for (var i = 1; i &lt;= len; i++) { arr.unshift(getDay(-i)) } arr.push(tt.getFullYear()+&apos;-&apos;+(tt.getMonth()+1)+&apos;-&apos;+tt.getDate()) for (var i = 1; i &lt;= len; i++) { arr.push(getDay(i)) } } return diretion === 1 ? arr.concat([tt.getFullYear()+&apos;-&apos;+(tt.getMonth()+1)+&apos;-&apos;+tt.getDate()]) : diretion === 2 ? [tt.getFullYear()+&apos;-&apos;+(tt.getMonth()+1)+&apos;-&apos;+tt.getDate()].concat(arr) : arr } /** * @param {s} 秒数 * @return {String} 字符串 * * @example formatHMS(3610) // -&gt; 1h0m10s */ formatHMS (s) { var str = &apos;&apos; if (s &gt; 3600) { str = Math.floor(s/3600)+&apos;h&apos;+Math.floor(s%3600/60)+&apos;m&apos;+s%60+&apos;s&apos; }else if(s &gt; 60) { str = Math.floor(s/60)+&apos;m&apos;+s%60+&apos;s&apos; }else{ str = s%60+&apos;s&apos; } return str } /*获取某月有多少天*/ getMonthOfDay (time) { var date = new Date(time) var year = date.getFullYear() var mouth = date.getMonth() + 1 var days //当月份为二月时，根据闰年还是非闰年判断天数 if (mouth == 2) { days = (year%4==0 &amp;&amp; year%100==0 &amp;&amp; year%400==0) || (year%4==0 &amp;&amp; year%100!=0) ? 28 : 29 } else if (mouth == 1 || mouth == 3 || mouth == 5 || mouth == 7 || mouth == 8 || mouth == 10 || mouth == 12) { //月份为：1,3,5,7,8,10,12 时，为大月.则天数为31； days = 31 } else { //其他月份，天数为：30. days = 30 } return days } /*获取某年有多少天*/ getYearOfDay (time) { var firstDayYear = this.getFirstDayOfYear(time); var lastDayYear = this.getLastDayOfYear(time); var numSecond = (new Date(lastDayYear).getTime() - new Date(firstDayYear).getTime())/1000; return Math.ceil(numSecond/(24*3600)); } /*获取某年的第一天*/ getFirstDayOfYear (time) { var year = new Date(time).getFullYear(); return year + &quot;-01-01 00:00:00&quot;; } /*获取某年最后一天*/ getLastDayOfYear (time) { var year = new Date(time).getFullYear(); var dateString = year + &quot;-12-01 00:00:00&quot;; var endDay = this.getMonthOfDay(dateString); return year + &quot;-12-&quot; + endDay + &quot; 23:59:59&quot;; } /*获取某个日期是当年中的第几天*/ getDayOfYear (time) { var firstDayYear = this.getFirstDayOfYear(time); var numSecond = (new Date(time).getTime() - new Date(firstDayYear).getTime())/1000; return Math.ceil(numSecond/(24*3600)); } /*获取某个日期在这一年的第几周*/ getDayOfYearWeek (time) { var numdays = this.getDayOfYear(time); return Math.ceil(numdays / 7); } Array/*判断一个元素是否在数组中*/ contains (arr, val) { return arr.indexOf(val) != -1 ? true : false; } /** * @param {arr} 数组 * @param {fn} 回调函数 * @return {undefined} */ each (arr, fn) { fn = fn || Function; var a = []; var args = Array.prototype.slice.call(arguments, 1); for(var i = 0; i &lt; arr.length; i++) { var res = fn.apply(arr, [arr[i], i].concat(args)); if(res != null) a.push(res); } } /** * @param {arr} 数组 * @param {fn} 回调函数 * @param {thisObj} this指向 * @return {Array} */ map (arr, fn, thisObj) { var scope = thisObj || window; var a = []; for(var i = 0, j = arr.length; i &lt; j; ++i) { var res = fn.call(scope, arr[i], i, this); if(res != null) a.push(res); } return a; } /** * @param {arr} 数组 * @param {type} 1：从小到大 2：从大到小 3：随机 * @return {Array} */ sort (arr, type = 1) { return arr.sort( (a, b) =&gt; { switch(type) { case 1: return a - b; case 2: return b - a; case 3: return Math.random() - 0.5; default: return arr; } }) } /*去重*/ unique (arr) { if ( Array.hasOwnProperty(&apos;from&apos;) ) { return Array.from(new Set(arr)); }else{ var n = {},r=[]; for(var i = 0; i &lt; arr.length; i++){ if (!n[arr[i]]){ n[arr[i]] = true; r.push(arr[i]); } } return r; } // 注：上面 else 里面的排重并不能区分 2 和 &apos;2&apos;，但能减少用indexOf带来的性能,暂时没找到替代的方法。。。 /* 正确排重 if ( Array.hasOwnProperty(&apos;from&apos;) ) { return Array.from(new Set(arr)) }else{ var r = [], NaNBol = true for(var i=0; i &lt; arr.length; i++) { if (arr[i] !== arr[i]) { if (NaNBol &amp;&amp; r.indexOf(arr[i]) === -1) { r.push(arr[i]) NaNBol = false } }else{ if(r.indexOf(arr[i]) === -1) r.push(arr[i]) } } return r } */ } /*求两个集合的并集*/ union (a, b) { var newArr = a.concat(b); return this.unique(newArr); } /*求两个集合的交集*/ intersect (a, b) { var _this = this; a = this.unique(a); return this.map(a, function(o) { return _this.contains(b, o) ? o : null; }); } /*删除其中一个元素*/ remove (arr, ele) { var index = arr.indexOf(ele); if(index &gt; -1) { arr.splice(index, 1); } return arr; } /*将类数组转换为数组的方法*/ formArray (ary) { var arr = []; if(Array.isArray(ary)) { arr = ary; } else { arr = Array.prototype.slice.call(ary); }; return arr; } /*最大值*/ max (arr) { return Math.max.apply(null, arr); } /*最小值*/ min (arr) { return Math.min.apply(null, arr); } /*求和*/ sum (arr) { return arr.reduce( (pre, cur) =&gt; { return pre + cur }) } /*平均值*/ average (arr) { return this.sum(arr)/arr.length } String 字符串操作/** * 去除空格 * @param {str} * @param {type} * type: 1-所有空格 2-前后空格 3-前空格 4-后空格 * @return {String} */ trim (str, type) { type = type || 1 switch (type) { case 1: return str.replace(/\s+/g, &quot;&quot;); case 2: return str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;); case 3: return str.replace(/(^\s*)/g, &quot;&quot;); case 4: return str.replace(/(\s*$)/g, &quot;&quot;); default: return str; } } /** * @param {str} * @param {type} * type: 1:首字母大写 2：首页母小写 3：大小写转换 4：全部大写 5：全部小写 * @return {String} */ changeCase (str, type) { type = type || 4 switch (type) { case 1: return str.replace(/\b\w+\b/g, function (word) { return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase(); }); case 2: return str.replace(/\b\w+\b/g, function (word) { return word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase(); }); case 3: return str.split(&apos;&apos;).map( function(word){ if (/[a-z]/.test(word)) { return word.toUpperCase(); }else{ return word.toLowerCase() } }).join(&apos;&apos;) case 4: return str.toUpperCase(); case 5: return str.toLowerCase(); default: return str; } } / 检测密码强度 / checkPwd (str) { var Lv = 0; if (str.length &lt; 6) { return Lv } if (/[0-9]/.test(str)) { Lv++ } if (/[a-z]/.test(str)) { Lv++ } if (/[A-Z]/.test(str)) { Lv++ } if (/[\.|-|_]/.test(str)) { Lv++ } return Lv; } /*过滤html代码(把&lt;&gt;转换)*/ filterTag (str) { str = str.replace(/&amp;/ig, &quot;&amp;amp;&quot;); str = str.replace(/&lt;/ig, &quot;&amp;lt;&quot;); str = str.replace(/&gt;/ig, &quot;&amp;gt;&quot;); str = str.replace(&quot; &quot;, &quot;&amp;nbsp;&quot;); return str; } Number/随机数范围/random (min, max) { if (arguments.length === 2) { return Math.floor(min + Math.random() * ( (max+1) - min )) }else{ return null; } } /将阿拉伯数字翻译成中文的大写数字/numberToChinese (num) { var AA = new Array(“零”, “一”, “二”, “三”, “四”, “五”, “六”, “七”, “八”, “九”, “十”); var BB = new Array(“”, “十”, “百”, “仟”, “萬”, “億”, “点”, “”); var a = (“” + num).replace(/(^0*)/g, “”).split(“.”), k = 0, re = “”; for(var i = a[0].length - 1; i &gt;= 0; i–) { switch(k) { case 0: re = BB[7] + re; break; case 4: if(!new RegExp(“0{4}//d{“ + (a[0].length - i - 1) + “}$”) .test(a[0])) re = BB[4] + re; break; case 8: re = BB[5] + re; BB[7] = BB[5]; k = 0; break; } if(k % 4 == 2 &amp;&amp; a[0].charAt(i + 2) != 0 &amp;&amp; a[0].charAt(i + 1) == 0) re = AA[0] + re; if(a[0].charAt(i) != 0) re = AA[a[0].charAt(i)] + BB[k % 4] + re; k++; } if(a.length &gt; 1) // 加上小数部分(如果有小数部分) { re += BB[6]; for(var i = 0; i &lt; a[1].length; i++) re += AA[a[1].charAt(i)]; } if(re == &apos;一十&apos;) re = &quot;十&quot;; if(re.match(/^一/) &amp;&amp; re.length == 3) re = re.replace(&quot;一&quot;, &quot;&quot;); return re; } /将数字转换为大写金额/changeToChinese (Num) { //判断如果传递进来的不是字符的话转换为字符 if(typeof Num == “number”) { Num = new String(Num); }; Num = Num.replace(/,/g, “”) //替换tomoney()中的“,” Num = Num.replace(/ /g, “”) //替换tomoney()中的空格 Num = Num.replace(/￥/g, “”) //替换掉可能出现的￥字符 if(isNaN(Num)) { //验证输入的字符是否为数字 //alert(“请检查小写金额是否正确”); return “”; }; //字符处理完毕后开始转换，采用前后两部分分别转换 var part = String(Num).split(“.”); var newchar = “”; //小数点前进行转化 for(var i = part[0].length - 1; i &gt;= 0; i–) { if(part[0].length &gt; 10) { return “”; //若数量超过拾亿单位，提示 } var tmpnewchar = “” var perchar = part[0].charAt(i); switch(perchar) { case “0”: tmpnewchar = “零” + tmpnewchar; break; case “1”: tmpnewchar = “壹” + tmpnewchar; break; case “2”: tmpnewchar = “贰” + tmpnewchar; break; case “3”: tmpnewchar = “叁” + tmpnewchar; break; case “4”: tmpnewchar = “肆” + tmpnewchar; break; case “5”: tmpnewchar = “伍” + tmpnewchar; break; case “6”: tmpnewchar = “陆” + tmpnewchar; break; case “7”: tmpnewchar = “柒” + tmpnewchar; break; case “8”: tmpnewchar = “捌” + tmpnewchar; break; case “9”: tmpnewchar = “玖” + tmpnewchar; break; } switch(part[0].length - i - 1) { case 0: tmpnewchar = tmpnewchar + “元”; break; case 1: if(perchar != 0) tmpnewchar = tmpnewchar + “拾”; break; case 2: if(perchar != 0) tmpnewchar = tmpnewchar + “佰”; break; case 3: if(perchar != 0) tmpnewchar = tmpnewchar + “仟”; break; case 4: tmpnewchar = tmpnewchar + “万”; break; case 5: if(perchar != 0) tmpnewchar = tmpnewchar + “拾”; break; case 6: if(perchar != 0) tmpnewchar = tmpnewchar + “佰”; break; case 7: if(perchar != 0) tmpnewchar = tmpnewchar + “仟”; break; case 8: tmpnewchar = tmpnewchar + “亿”; break; case 9: tmpnewchar = tmpnewchar + “拾”; break; } var newchar = tmpnewchar + newchar; } //小数点之后进行转化 if(Num.indexOf(“.”) != -1) { if(part[1].length &gt; 2) { // alert(“小数点之后只能保留两位,系统将自动截断”); part[1] = part[1].substr(0, 2) } for(i = 0; i &lt; part[1].length; i++) { tmpnewchar = “” perchar = part[1].charAt(i) switch(perchar) { case “0”: tmpnewchar = “零” + tmpnewchar; break; case “1”: tmpnewchar = “壹” + tmpnewchar; break; case “2”: tmpnewchar = “贰” + tmpnewchar; break; case “3”: tmpnewchar = “叁” + tmpnewchar; break; case “4”: tmpnewchar = “肆” + tmpnewchar; break; case “5”: tmpnewchar = “伍” + tmpnewchar; break; case “6”: tmpnewchar = “陆” + tmpnewchar; break; case “7”: tmpnewchar = “柒” + tmpnewchar; break; case “8”: tmpnewchar = “捌” + tmpnewchar; break; case “9”: tmpnewchar = “玖” + tmpnewchar; break; } if(i == 0) tmpnewchar = tmpnewchar + “角”; if(i == 1) tmpnewchar = tmpnewchar + “分”; newchar = newchar + tmpnewchar; } } //替换所有无用汉字 while(newchar.search(“零零”) != -1) newchar = newchar.replace(“零零”, “零”); newchar = newchar.replace(“零亿”, “亿”); newchar = newchar.replace(“亿万”, “亿”); newchar = newchar.replace(“零万”, “万”); newchar = newchar.replace(“零元”, “元”); newchar = newchar.replace(“零角”, “”); newchar = newchar.replace(“零分”, “”); if(newchar.charAt(newchar.length - 1) == “元”) { newchar = newchar + “整” } return newchar; } Http/** * @param {setting} */ ajax(setting){ //设置参数的初始值 var opts={ method: (setting.method || &quot;GET&quot;).toUpperCase(), //请求方式 url: setting.url || &quot;&quot;, // 请求地址 async: setting.async || true, // 是否异步 dataType: setting.dataType || &quot;json&quot;, // 解析方式 data: setting.data || &quot;&quot;, // 参数 success: setting.success || function(){}, // 请求成功回调 error: setting.error || function(){} // 请求失败回调 } // 参数格式化 function params_format (obj) { var str = &apos;&apos; for (var i in obj) { str += i + &apos;=&apos; + obj[i] + &apos;&amp;&apos; } return str.split(&apos;&apos;).slice(0, -1).join(&apos;&apos;) } // 创建ajax对象 var xhr=new XMLHttpRequest(); // 连接服务器open(方法GET/POST，请求地址， 异步传输) if(opts.method == &apos;GET&apos;){ xhr.open(opts.method, opts.url + &quot;?&quot; + params_format(opts.data), opts.async); xhr.send(); }else{ xhr.open(opts.method, opts.url, opts.async); xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;); xhr.send(opts.data); } / 每当readyState改变时，就会触发onreadystatechange事件 readyState属性存储有XMLHttpRequest的状态信息 0 ：请求未初始化 1 ：服务器连接已建立 2 ：请求已接受 3 : 请求处理中 ** 4 ：请求已完成，且相应就绪 / xhr.onreadystatechange = function() { if (xhr.readyState === 4 &amp;&amp; (xhr.status === 200 || xhr.status === 304)) { switch(opts.dataType){ case &quot;json&quot;: var json = JSON.parse(xhr.responseText); opts.success(json); break; case &quot;xml&quot;: opts.success(xhr.responseXML); break; default: opts.success(xhr.responseText); break; } } } xhr.onerror = function(err) { opts.error(err); } } /** * @param {url} * @param {setting} * @return {Promise} */ fetch(url, setting) { //设置参数的初始值 let opts={ method: (setting.method || &apos;GET&apos;).toUpperCase(), //请求方式 headers : setting.headers || {}, // 请求头设置 credentials : setting.credentials || true, // 设置cookie是否一起发送 body: setting.body || {}, mode : setting.mode || &apos;no-cors&apos;, // 可以设置 cors, no-cors, same-origin redirect : setting.redirect || &apos;follow&apos;, // follow, error, manual cache : setting.cache || &apos;default&apos; // 设置 cache 模式 (default, reload, no-cache) } let dataType = setting.dataType || &quot;json&quot;, // 解析方式 data = setting.data || &quot;&quot; // 参数 // 参数格式化 function params_format (obj) { var str = &apos;&apos; for (var i in obj) { str += `${i}=${obj[i]}&amp;` } return str.split(&apos;&apos;).slice(0, -1).join(&apos;&apos;) } if (opts.method === &apos;GET&apos;) { url = url + (data?`?${params_format(data)}`:&apos;&apos;) }else{ setting.body = data || {} } return new Promise( (resolve, reject) =&gt; { fetch(url, opts).then( async res =&gt; { let data = dataType === &apos;text&apos; ? await res.text() : dataType === &apos;blob&apos; ? await res.blob() : await res.json() resolve(data) }).catch( e =&gt; { reject(e) }) }) } DOM$ (selector){ var type = selector.substring(0, 1); if (type === &apos;#&apos;) { if (document.querySelecotor) return document.querySelector(selector) return document.getElementById(selector.substring(1)) }else if (type === &apos;.&apos;) { if (document.querySelecotorAll) return document.querySelectorAll(selector) return document.getElementsByClassName(selector.substring(1)) }else{ return document[&apos;querySelectorAll&apos; ? &apos;querySelectorAll&apos;:&apos;getElementsByTagName&apos;](selector) } } /*检测类名*/ hasClass (ele, name) { return ele.className.match(new RegExp(&apos;(\\s|^)&apos; + name + &apos;(\\s|$)&apos;)); } /*添加类名*/ addClass (ele, name) { if (!this.hasClass(ele, name)) ele.className += &quot; &quot; + name; } /*删除类名*/ removeClass (ele, name) { if (this.hasClass(ele, name)) { var reg = new RegExp(&apos;(\\s|^)&apos; + name + &apos;(\\s|$)&apos;); ele.className = ele.className.replace(reg, &apos;&apos;); } } /*替换类名*/ replaceClass (ele, newName, oldName) { this.removeClass(ele, oldName); this.addClass(ele, newName); } /*获取兄弟节点*/ siblings (ele) { console.log(ele.parentNode) var chid = ele.parentNode.children,eleMatch = []; for(var i = 0, len = chid.length; i &lt; len; i ++){ if(chid[i] != ele){ eleMatch.push(chid[i]); } } return eleMatch; } /*获取行间样式属性*/ getByStyle (obj,name){ if(obj.currentStyle){ return obj.currentStyle[name]; }else{ return getComputedStyle(obj,false)[name]; } } Storage 储存操作class StorageFn { constructor () { this.ls = window.localStorage; this.ss = window.sessionStorage; } /*-----------------cookie---------------------*/ /*设置cookie*/ setCookie (name, value, day) { var setting = arguments[0]; if (Object.prototype.toString.call(setting).slice(8, -1) === &apos;Object&apos;){ for (var i in setting) { var oDate = new Date(); oDate.setDate(oDate.getDate() + day); document.cookie = i + &apos;=&apos; + setting[i] + &apos;;expires=&apos; + oDate; } }else{ var oDate = new Date(); oDate.setDate(oDate.getDate() + day); document.cookie = name + &apos;=&apos; + value + &apos;;expires=&apos; + oDate; } } /*获取cookie*/ getCookie (name) { var arr = document.cookie.split(&apos;; &apos;); for (var i = 0; i &lt; arr.length; i++) { var arr2 = arr[i].split(&apos;=&apos;); if (arr2[0] == name) { return arr2[1]; } } return &apos;&apos;; } /*删除cookie*/ removeCookie (name) { this.setCookie(name, 1, -1); } /*-----------------localStorage---------------------*/ /*设置localStorage*/ setLocal(key, val) { var setting = arguments[0]; if (Object.prototype.toString.call(setting).slice(8, -1) === &apos;Object&apos;){ for(var i in setting){ this.ls.setItem(i, JSON.stringify(setting[i])) } }else{ this.ls.setItem(key, JSON.stringify(val)) } } /*获取localStorage*/ getLocal(key) { if (key) return JSON.parse(this.ls.getItem(key)) return null; } /*移除localStorage*/ removeLocal(key) { this.ls.removeItem(key) } /*移除所有localStorage*/ clearLocal() { this.ls.clear() } /*-----------------sessionStorage---------------------*/ /*设置sessionStorage*/ setSession(key, val) { var setting = arguments[0]; if (Object.prototype.toString.call(setting).slice(8, -1) === &apos;Object&apos;){ for(var i in setting){ this.ss.setItem(i, JSON.stringify(setting[i])) } }else{ this.ss.setItem(key, JSON.stringify(val)) } } /*获取sessionStorage*/ getSession(key) { if (key) return JSON.parse(this.ss.getItem(key)) return null; } /*移除sessionStorage*/ removeSession(key) { this.ss.removeItem(key) } /*移除所有sessionStorage*/ clearSession() { this.ss.clear() } } Other 其它操作/*获取网址参数*/ getURL(name){ var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;); var r = decodeURI(window.location.search).substr(1).match(reg); if(r!=null) return r[2]; return null; } /*获取全部url参数,并转换成json对象*/ getUrlAllParams (url) { var url = url ? url : window.location.href; var _pa = url.substring(url.indexOf(&apos;?&apos;) + 1), _arrS = _pa.split(&apos;&amp;&apos;), _rs = {}; for (var i = 0, _len = _arrS.length; i &lt; _len; i++) { var pos = _arrS[i].indexOf(&apos;=&apos;); if (pos == -1) { continue; } var name = _arrS[i].substring(0, pos), value = window.decodeURIComponent(_arrS[i].substring(pos + 1)); _rs[name] = value; } return _rs; } /*删除url指定参数，返回url*/ delParamsUrl(url, name){ var baseUrl = url.split(&apos;?&apos;)[0] + &apos;?&apos;; var query = url.split(&apos;?&apos;)[1]; if (query.indexOf(name)&gt;-1) { var obj = {} var arr = query.split(&quot;&amp;&quot;); for (var i = 0; i &lt; arr.length; i++) { arr[i] = arr[i].split(&quot;=&quot;); obj[arr[i][0]] = arr[i][1]; }; delete obj[name]; var url = baseUrl + JSON.stringify(obj).replace(/[\&quot;\{\}]/g,&quot;&quot;).replace(/\:/g,&quot;=&quot;).replace(/\,/g,&quot;&amp;&quot;); return url }else{ return url; } } /*获取十六进制随机颜色*/ getRandomColor () { return &apos;#&apos; + (function(h) { return new Array(7 - h.length).join(&quot;0&quot;) + h; })((Math.random() * 0x1000000 &lt;&lt; 0).toString(16)); } /*图片加载*/ imgLoadAll(arr,callback){ var arrImg = []; for (var i = 0; i &lt; arr.length; i++) { var img = new Image(); img.src = arr[i]; img.onload = function(){ arrImg.push(this); if (arrImg.length == arr.length) { callback &amp;&amp; callback(); } } } } /*音频加载*/ loadAudio(src, callback) { var audio = new Audio(src); audio.onloadedmetadata = callback; audio.src = src; } /*DOM转字符串*/ domToStirng(htmlDOM){ var div= document.createElement(&quot;div&quot;); div.appendChild(htmlDOM); return div.innerHTML } /*字符串转DOM*/ stringToDom(htmlString){ var div= document.createElement(&quot;div&quot;); div.innerHTML=htmlString; return div.children[0]; } /** * 光标所在位置插入字符，并设置光标位置 * * @param {dom} 输入框 * @param {val} 插入的值 * @param {posLen} 光标位置处在 插入的值的哪个位置 */ setCursorPosition (dom,val,posLen) { var cursorPosition = 0; if(dom.selectionStart){ cursorPosition = dom.selectionStart; } this.insertAtCursor(dom,val); dom.focus(); console.log(posLen) dom.setSelectionRange(dom.value.length,cursorPosition + (posLen || val.length)); } /*光标所在位置插入字符*/ insertAtCursor(dom, val) { if (document.selection){ dom.focus(); sel = document.selection.createRange(); sel.text = val; sel.select(); }else if (dom.selectionStart || dom.selectionStart == &apos;0&apos;){ let startPos = dom.selectionStart; let endPos = dom.selectionEnd; let restoreTop = dom.scrollTop; dom.value = dom.value.substring(0, startPos) + val + dom.value.substring(endPos, dom.value.length); if (restoreTop &gt; 0){ dom.scrollTop = restoreTop; } dom.focus(); dom.selectionStart = startPos + val.length; dom.selectionEnd = startPos + val.length; } else { dom.value += val; dom.focus(); } } CSS pc-reset PC样式初始化/* normalize.css */ html { line-height: 1.15; /* 1 */ -ms-text-size-adjust: 100%; /* 2 */ -webkit-text-size-adjust: 100%; /* 2 */ } body { margin: 0; } article, aside, footer, header, nav, section { display: block; } h1 { font-size: 2em; margin: 0.67em 0; } figcaption, figure, main { /* 1 */ display: block; } figure { margin: 1em 40px; } hr { box-sizing: content-box; /* 1 */ height: 0; /* 1 */ overflow: visible; /* 2 */ } pre { font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */ } a { background-color: transparent; /* 1 */ -webkit-text-decoration-skip: objects; /* 2 */ } abbr[title] { border-bottom: none; /* 1 */ text-decoration: underline; /* 2 */ text-decoration: underline dotted; /* 2 */ } b, strong { font-weight: inherit; } b, strong { font-weight: bolder; } code, kbd, samp { font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */ } dfn { font-style: italic; } mark { background-color: #ff0; color: #000; } small { font-size: 80%; } sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } sub { bottom: -0.25em; } sup { top: -0.5em; } audio, video { display: inline-block; } audio:not([controls]) { display: none; height: 0; } img { border-style: none; } svg:not(:root) { overflow: hidden; } button, input, optgroup, select, textarea { font-family: sans-serif; /* 1 */ font-size: 100%; /* 1 */ line-height: 1.15; /* 1 */ margin: 0; /* 2 */ } button, input { /* 1 */ overflow: visible; } button, select { /* 1 */ text-transform: none; } button, html [type=&quot;button&quot;], /* 1 */ [type=&quot;reset&quot;], [type=&quot;submit&quot;] { -webkit-appearance: button; /* 2 */ } button::-moz-focus-inner, [type=&quot;button&quot;]::-moz-focus-inner, [type=&quot;reset&quot;]::-moz-focus-inner, [type=&quot;submit&quot;]::-moz-focus-inner { border-style: none; padding: 0; } button:-moz-focusring, [type=&quot;button&quot;]:-moz-focusring, [type=&quot;reset&quot;]:-moz-focusring, [type=&quot;submit&quot;]:-moz-focusring { outline: 1px dotted ButtonText; } fieldset { padding: 0.35em 0.75em 0.625em; } legend { box-sizing: border-box; /* 1 */ color: inherit; /* 2 */ display: table; /* 1 */ max-width: 100%; /* 1 */ padding: 0; /* 3 */ white-space: normal; /* 1 */ } progress { display: inline-block; /* 1 */ vertical-align: baseline; /* 2 */ } textarea { overflow: auto; } [type=&quot;checkbox&quot;], [type=&quot;radio&quot;] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ } [type=&quot;number&quot;]::-webkit-inner-spin-button, [type=&quot;number&quot;]::-webkit-outer-spin-button { height: auto; } [type=&quot;search&quot;] { -webkit-appearance: textfield; /* 1 */ outline-offset: -2px; /* 2 */ } [type=&quot;search&quot;]::-webkit-search-cancel-button, [type=&quot;search&quot;]::-webkit-search-decoration { -webkit-appearance: none; } ::-webkit-file-upload-button { -webkit-appearance: button; /* 1 */ font: inherit; /* 2 */ } details, /* 1 */ menu { display: block; } summary { display: list-item; } canvas { display: inline-block; } template { display: none; } [hidden] { display: none; } /* reset */ html, body, h1, h2, h3, h4, h5, h6, div, dl, dt, dd, ul, ol, li, p, blockquote, pre, hr, figure, table, caption, th, td, form, fieldset, legend, input, button, textarea, menu { margin: 0; padding: 0; box-sizing: border-box; } Phone-reset/* normalize.css */ html { line-height: 1.15; /* 1 */ -ms-text-size-adjust: 100%; /* 2 */ -webkit-text-size-adjust: 100%; /* 2 */ } body { margin: 0; } article, aside, footer, header, nav, section { display: block; } h1 { font-size: 2em; margin: 0.67em 0; } figcaption, figure, main { /* 1 */ display: block; } figure { margin: 1em 40px; } hr { box-sizing: content-box; /* 1 */ height: 0; /* 1 */ overflow: visible; /* 2 */ } pre { font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */ } a { background-color: transparent; /* 1 */ -webkit-text-decoration-skip: objects; /* 2 */ } abbr[title] { border-bottom: none; /* 1 */ text-decoration: underline; /* 2 */ text-decoration: underline dotted; /* 2 */ } b, strong { font-weight: inherit; } b, strong { font-weight: bolder; } code, kbd, samp { font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */ } dfn { font-style: italic; } mark { background-color: #ff0; color: #000; } small { font-size: 80%; } sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } sub { bottom: -0.25em; } sup { top: -0.5em; } audio, video { display: inline-block; } audio:not([controls]) { display: none; height: 0; } img { border-style: none; } svg:not(:root) { overflow: hidden; } button, input, optgroup, select, textarea { font-family: sans-serif; /* 1 */ font-size: 100%; /* 1 */ line-height: 1.15; /* 1 */ margin: 0; /* 2 */ } button, input { /* 1 */ overflow: visible; } button, select { /* 1 */ text-transform: none; } button, html [type=&quot;button&quot;], /* 1 */ [type=&quot;reset&quot;], [type=&quot;submit&quot;] { -webkit-appearance: button; /* 2 */ } button::-moz-focus-inner, [type=&quot;button&quot;]::-moz-focus-inner, [type=&quot;reset&quot;]::-moz-focus-inner, [type=&quot;submit&quot;]::-moz-focus-inner { border-style: none; padding: 0; } button:-moz-focusring, [type=&quot;button&quot;]:-moz-focusring, [type=&quot;reset&quot;]:-moz-focusring, [type=&quot;submit&quot;]:-moz-focusring { outline: 1px dotted ButtonText; } fieldset { padding: 0.35em 0.75em 0.625em; } legend { box-sizing: border-box; /* 1 */ color: inherit; /* 2 */ display: table; /* 1 */ max-width: 100%; /* 1 */ padding: 0; /* 3 */ white-space: normal; /* 1 */ } progress { display: inline-block; /* 1 */ vertical-align: baseline; /* 2 */ } textarea { overflow: auto; } [type=&quot;checkbox&quot;], [type=&quot;radio&quot;] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ } [type=&quot;number&quot;]::-webkit-inner-spin-button, [type=&quot;number&quot;]::-webkit-outer-spin-button { height: auto; } [type=&quot;search&quot;] { -webkit-appearance: textfield; /* 1 */ outline-offset: -2px; /* 2 */ } [type=&quot;search&quot;]::-webkit-search-cancel-button, [type=&quot;search&quot;]::-webkit-search-decoration { -webkit-appearance: none; } ::-webkit-file-upload-button { -webkit-appearance: button; /* 1 */ font: inherit; /* 2 */ } details, /* 1 */ menu { display: block; } summary { display: list-item; } canvas { display: inline-block; } template { display: none; } [hidden] { display: none; } /* reset */ html, body, h1, h2, h3, h4, h5, h6, div, dl, dt, dd, ul, ol, li, p, blockquote, pre, hr, figure, table, caption, th, td, form, fieldset, legend, input, button, textarea, menu { margin: 0; padding: 0; box-sizing: border-box; } html, body { /* 禁止选中文本 */ -webkit-user-select: none; user-select: none; font: Oswald, &apos;Open Sans&apos;, Helvetica, Arial, sans-serif } /* 禁止长按链接与图片弹出菜单 */ a, img { -webkit-touch-callout: none; } /*ios android去除自带阴影的样式*/ a, input { -webkit-tap-highlight-color: rgba(0, 0, 0, 0); } input[type=&quot;text&quot;] { -webkit-appearance: none; } 公共样式提取/* 禁止选中文本 */ .usn{ -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none; -o-user-select:none; user-select:none; } /* 浮动 */ .fl { float: left; } .fr { float: right; } .cf { zoom: 1; } .cf:after { content:&quot;.&quot;; display:block; clear:both; visibility:hidden; height:0; overflow:hidden; } /* 元素类型 */ .db { display: block; } .dn { display: none; } .di { display: inline } .dib {display: inline-block;} .transparent { opacity: 0 } /*文字排版、颜色*/ .f12 { font-size:12px } .f14 { font-size:14px } .f16 { font-size:16px } .f18 { font-size:18px } .f20 { font-size:20px } .fb { font-weight:bold } .fn { font-weight:normal } .t2 { text-indent:2em } .red,a.red { color:#cc0031 } .darkblue,a.darkblue { color:#039 } .gray,a.gray { color:#878787 } .lh150 { line-height:150% } .lh180 { line-height:180% } .lh200 { line-height:200% } .unl { text-decoration:underline; } .no_unl { text-decoration:none; } .tl { text-align: left; } .tc { text-align: center; } .tr { text-align: right; } .tj { text-align: justify; text-justify: inter-ideograph; } .wn { /* 强制不换行 */ word-wrap:normal; white-space:nowrap; } .wb { /* 强制换行 */ white-space:normal; word-wrap:break-word; word-break:break-all; } .wp { /* 保持空白序列*/ overflow:hidden;text-align:left;white-space:pre-wrap;word-wrap:break-word;word-break:break-all; } .wes { /* 多出部分用省略号表示 , 用于一行 */ overflow:hidden; word-wrap:normal; white-space:nowrap; text-overflow:ellipsis; } .wes-2 { /* 适用于webkit内核和移动端 */ display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2; overflow: hidden; } .wes-3 { display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden; } .wes-4 { display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 4; overflow: hidden; } /* 溢出样式 */ .ofh { overflow: hidden; } .ofs {overflow: scroll; } .ofa {overflow: auto; } .ofv {overflow: visible; } /* 定位方式 */ .ps {position: static; } .pr {position: relative;zoom:1; } .pa {position: absolute; } .pf {position: fixed; } /* 垂直对齐方式 */ .vt {vertical-align: top; } .vm {vertical-align: middle; } .vb {vertical-align: bottom; } /* 鼠标样式 */ .csd {cursor: default; } .csp {cursor: pointer; } .csh {cursor: help; } .csm {cursor: move; } /* flex布局 */ .df-sb { display:flex; align-items: center; justify-content: space-between; } .df-sa { display:flex; align-items: center; justify-content: space-around; } /* 垂直居中 */ .df-c { display: flex; align-items: center; justify-content: center; } .tb-c { text-align:center; display:table-cell; vertical-align:middle; } .ts-c { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); } .ts-mc { position: absolute; left: 0;right: 0; bottom: 0; top: 0; margin: auto; } /* 辅助 */ .mask-fixed-wrapper { width: 100%; height: 100%; position: fixed; left:0;top:0; background: rgba(0, 0, 0, 0.65); z-index: 999; } .bg-cover { background-size: cover; background-repeat: no-repeat; background-position: center center; } .bg-cover-all { background-size: 100% 100%; background-repeat: no-repeat; background-position: center center; }]]></content>
      <tags>
        <tag>前端js学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nuxt.js学习]]></title>
    <url>%2F2018%2F05%2F16%2Fframe%2Fnuxt%2F</url>
    <content type="text"><![CDATA[关于Nuxt.js2016年10月25日，zeit.co背后的团队对外发布了Next.js，一个react的服务端渲染应用框架。几个小时后，与Next.js异曲同工，一个基于vue.js的服务端渲染应用框架应用而生，我们称之：Nuxt.js。 Nuxt.js是什么？Nuxt.js是一个基于vue.js的通用应用框架 通过对客户端/服务端基础架构的抽象组织，Nuxt.js只要关注的是应用的UI渲染 我们的目标是插件一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有的Node.js项目中使用Nuxt.js Nuxt.js预设了利用vue.js开发服务端渲染的应用所需要的各种配置 除此之外，我们还提供了一种命令叫：nuxt generate，为基于vue.js的用用提供生成对应的静态站点的功能 我们相信这个命令所提供的功能，是向开发集成各种微服务的web应用迈开的新一步 作为框架，nuxt.js为客户端/服务端这种典型的应用框架模式提供了许多有用的特性，例如异步数据加载，中间件支持，布局支持等]]></content>
      <tags>
        <tag>前端框架学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS事件循环]]></title>
    <url>%2F2018%2F05%2F15%2Fjavascript%2Fjs%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[一、为什么JS是单线程是由JS的用途决定的，其用途主要是与用户互动，以及操作DOM，如果不是单线程的话会带来很复杂的同步问题。比如：如果是多线程的话，一个用户新建一个DOM，另一个用户删除同一个DOM，该如何处理将变得非常麻烦。 在html5中提出了web worker（todo 改天添加web worker的讲解）标准，JS可以创建多个线程或者是iframe，但是其他子线程主要是用来进行JS计算不能操作DOM，且受到子线程的控制。所以也并没有改变JS单线程的本质 二、同步和异步由于是单线程，所有任务需要排队，但是如果队列中所有的任务都是同步的话会造成资源的浪费。 于是任务分为两类：同步任务和异步任务。 异步任务的过程： 主线程（函数调用栈）发起一个异步请求，相应的工作线程接收请求，并告知主线程已经收到，主线程继续执行后面的同步代码，同时工作线程执行异步任务，工作线程完成工作后，通知主线程，主线程收到通知后，执行回调函数 三、宏任务和微任务宏任务（micro-task）主要是：script代码段、setTimeout、setInterval、Promise的构造函数是同步的、setImmediate、I/O、UIrendering 微任务（macro-task）主要是：Promise的回调、process.nextTick 四、任务队列和事件循环了解任务队列之前，先了解一下任务源，我们将发起异步任务的称之为任务源（setTimeout、Promise等），进入任务队列的是他们指定的任务。 在一个线程中，事件循环是唯一的，任务队列是多个的。来自不同任务源的队列进入到不同的任务队列，setTimeout和setInterval是同源的 事件循环的步骤：1、运行主线程（函数调用栈）中的同步任务 2、主线程（函数调用栈）执行到任务源时，通知相应的webAPIs进行相应的执行异步任务，将任务源指定的异步任务放入任务队列中 3、主线程（函数调用栈）中的任务执行完毕后，然后执行所有的微任务，再执行宏任务，找到一个任务队列执行完毕，再执行所有的微任务 4、不断执行第三步 事件循环：指主线程重复从任务队列中取消息，执行的过程 先来一个简单的例子： setTimeout(() =&gt; { console.log(&apos;begin&apos;) }) new Promise((resolve) =&gt; { console.log(&apos;promise begin&apos;) for(let i = 0; i &lt; 1000; i++) { i == 999 &amp;&amp; resolve() } }).then(() =&gt; { console.log(&apos;then begin&apos;) }) console.log(&apos;end&apos;) 因为promise的构造函数是同步的，promise.then是异步的微任务，所以promise beigin先于end根据上面对宏任务和微任务的分析，其输出的情况为【promise begin——end——then begin——begin】再来一个复杂点的，我们来一步一步的分析一个例子来看： console.log(&apos;golb1&apos;); setTimeout(function() { console.log(&apos;timeout1&apos;); process.nextTick(function() { console.log(&apos;timeout1_nextTick&apos;); }) new Promise(function(resolve) { console.log(&apos;timeout1_promise&apos;); resolve(); }).then(function() { console.log(&apos;timeout1_then&apos;) }) }) setImmediate(function() { console.log(&apos;immediate1&apos;); process.nextTick(function() { console.log(&apos;immediate1_nextTick&apos;); }) new Promise(function(resolve) { console.log(&apos;immediate1_promise&apos;); resolve(); }).then(function() { console.log(&apos;immediate1_then&apos;) }) }) process.nextTick(function() { console.log(&apos;glob1_nextTick&apos;); }) new Promise(function(resolve) { console.log(&apos;glob1_promise&apos;); resolve(); }).then(function() { console.log(&apos;glob1_then&apos;) }) setTimeout(function() { console.log(&apos;timeout2&apos;); process.nextTick(function() { console.log(&apos;timeout2_nextTick&apos;); }) new Promise(function(resolve) { console.log(&apos;timeout2_promise&apos;); resolve(); }).then(function() { console.log(&apos;timeout2_then&apos;) }) }) process.nextTick(function() { console.log(&apos;glob2_nextTick&apos;); }) new Promise(function(resolve) { console.log(&apos;glob2_promise&apos;); resolve(); }).then(function() { console.log(&apos;glob2_then&apos;) }) setImmediate(function() { console.log(&apos;immediate2&apos;); process.nextTick(function() { console.log(&apos;immediate2_nextTick&apos;); }) new Promise(function(resolve) { console.log(&apos;immediate2_promise&apos;); resolve(); }).then(function() { console.log(&apos;immediate2_then&apos;) }) }) 一、第一步、首先执行宏任务script。全局入栈。输出glob1 二、遇到setTimeout，作为任务源，将指定的任务加入宏任务队列 三、遇到setImmediate，作为任务源，将指定的任务加入宏任务队列 四、遇到process.nextTick，作为任务源，将指定的任务加入微任务队列 五、遇到Promise的构造函数，进入执行栈，输出glob1_promise，Promise.then()作为任务源，将指定的任务加入微任务 六、遇到setTimeout，作为任务源，将指定的任务加入宏任务队列 七、遇到process.nextTick，作为任务源，将指定的任务加入微任务队列 八、遇到Promise的构造函数，进入执行栈，输出glob2_promise，Promise.then()作为任务源，将指定的任务加入微任务 九、遇到setImmediate，作为任务源，将指定的任务加入宏任务队列 十、执行所有微任务队列，输出glob1_nextTick和glob2_nextTick、glob1_then、glob2_then 事件机制其实就是异步任务的通知机制]]></content>
      <tags>
        <tag>前端js学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node.js第一个应用]]></title>
    <url>%2F2018%2F05%2F15%2Fnode%2Fnode.js%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[什么是node.js？ 简单的说node.js就是运行在服务端的JavaScript node.js是一个基于chrome javascript 运行时建立的一个平台 node.js是一个事件驱动I/O服务器JavaScript环境，基于Google的v8殷勤，v8殷勤执行JavaScript的速度非常快，性能非常好 查看版本 node -v 注意：不同版本间是有差异性的 第一个node.js程序： hello world! 脚本模式 console.log(“hello world!”); 保存该文件，文件名为helloworld.js，并通过node命令来执行 node helloworld.js 程序执行结果为 hello world! 交互模式 打开终端，输入node进入命令交互模式，可以输入一条代码语句后立即执行并显示结果 nodeconsole.log(‘hello world!’) hello world! 创建node的第一个应用 如果我们使用PHP来编写后端的代码时，需要Apache或者Nginx的http服务器，并配置mod_php5模块和php_cgi 从这个角度看，整个接受http请求并提供web页面的需求根本不需要PHP来处理 不过对node.js来说，概念就完全不一样了，使用node.js时，我们不仅仅在实现一个应用，同事还实现了整个http服务器 事实上，我们的web应用以及对应的web服务器基本上是一致的 在我们创建node的第一个程序“hello world!”应用前，让我们先了解下node.js应用由那几个部分组成 1.引入required模块：我们可以使用require指令来载入node.js模块 2.穿件服务器：服务器可以监听客户端的请求，类似于Apache、Nginx等http服务器 3.接受请求与响应请求：服务器很容易创建，客户端可以使用浏览器或终端发送http请求，服务器接受请求后返回响应数据 创建node.js应用 步骤一：引入required模块 我们使用require指令来载入http模块，并将实例化的http赋值给变量http var http = require(‘http’) 步骤二：创建服务器 接下来我们使用http.createServer()方法创建服务器，并使用listen方法绑定8888端口。函数通过request、response参数来接收数据和响应数据实例如下，在你的项目的根目录下创建一个叫server.js的文件，并写入以下代码 var http = require(&apos;http); http.createServer(function (request, response) { // 发送http头部 // http状态值：200 : ok // 内容类型：text/plain response.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos; }) // 发送响应数据“hello world” }).listen(8888) // 终端打印如下结果 console.log(&apos;Server running at http://127.0.0.1:8888/&apos;) 以上代码我们完成了一个可以工作的http服务器使用node命令执行以上代码 node server.js 结果：Server running at http://127.0.0.1:8888/ 分析： 第一行请求（require）node.js自带的http模块，并把它赋值给http变量 接下来我们调用http模块提供的函数：createServer，这个函数会返回一个对象，对象有个叫listen的方法，这个方法有个数值参数，指定这个http服务器监听的端口号]]></content>
      <tags>
        <tag>node.js学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇文章]]></title>
    <url>%2F2018%2F05%2F11%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[段落第一自然段 第二自然段 注意：换行不是分段的标识，空行才是 标题一级标题二级标题三级标题四级标题五级标题六级标题注：# 和后续内容之间应放置一个空格 列表(1) 有序列表 打开冰箱门 把大象放进冰箱 关上冰箱门 (2) 无序列表 吃饭 睡觉 打豆豆 注意事项： 无序列表的项目符号可使用 *,+,- 效果是相同的。 列表与后续内容之间需要一个空行隔开，即：列表是一个段落 列表允许多层次嵌套 可以在项目中包含段落，只需将段落前添加一个 tab 或 4 个空格 分割线语法：使用 3 个连续的 * 即可得到一个分割线 引用语法：在行头加上 &gt; 即可。 这里是一段引用 大于号 和 文字必须有一个空格 可以在每行之前加 &gt; ，也可以在段落之前加 1 个 &gt; 引用内部可以使用其他 Markdown 标记 引用内部可以添加新的引用，只需再加一个大于号 行内标记(1) 强调文字 斜体 语法：使用前后各 1 个 *(或_) 包含的文字是 斜体 文字 *斜体*, _斜体_ 粗体 语法：使用前后各 2 个 *(或_) 包含的文字是 粗体 文字 **粗体**，__粗体__ 删除文字 语法：使用前后各 2 个 ~ 包含的文字是删除文字 ~~删除~~ 粗斜体 语法：在**(或__)中嵌套_ (或*) 或 在_(或*)中嵌套**(或__)即可得到 粗斜体。 _**粗斜体**_， *__粗斜体__* **_粗斜体_**， __*粗斜体*__ (2) 图片与链接 1.图片：行内图片、引用图片 1&gt; 行内图片 图片和图片地址写在一起。 语法： ![图片标题](图片url) ![史努比](http://upload-images.jianshu.io/upload_images/2779565-13b3439b110c16bf.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 2&gt; 引用图片 图片和图片地址分开书写。 语法： ![图片标题][图片id] [图片id]:图片url ![史努比][snoopy] [snoopy]: http://upload-images.jianshu.io/upload_images/2779565-13b3439b110c16bf.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 2. 链接：行内链接、链接引用、自动链接 1&gt; 行内链接 语法：[链接名称](链接地址 url &quot;链接title&quot;) 示例代码 [新浪](http://www.sina.com.cn &quot;新浪主页&quot;) 新浪 注意事项 双引号中的内容是链接的 title (目前汉字显示不正确) 2&gt; 链接引用 一种链接和地址分离的方式。 [链接名称][链接id] [链接id]:链接 url 地址 &quot;链接 title&quot; 示例代码 根据 [雅虎][yahoo] 的调查，希拉里将当选；根据 [谷歌][google] 的调查，川普将当选。 [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [google]: http://google.com/ &quot;Google&quot; 根据 雅虎 的调查，希拉里将当选；根据 谷歌 的调查，川普将当选。 注意事项 链接 id 可使用字母、数字、空格，但不区分大小写 3.脚注 -- 为名词提供注释，注释将显示在文章末尾。 语法： 待解释文字[^脚注 id] [^脚注 id]:注释内容 示例代码 Hello程序[^hello] [^hello]:即：Hello, world 程序 Hello程序[^hello][^hello]:即：Hello, world 程序 注意事项 脚注 id 必须唯一 无论脚注 id 如何起名，显示时一律标为数字，并且按出现顺序排列 双标记既可作为区块标记又可作为行内标记的标记。 代码块 1) 行内代码块 语法：使用两个 ` 将代码包含起来 示例代码 在 Java 输出 Hello, world ：System.out.print(&quot;Hello, World!&quot;); 在 Java 输出 Hello, world ：System.out.print(&quot;Hello, World!&quot;); 2) 多行代码块 语法：只需要每行都缩进 4 个空格即可，或者使用123456789101112131415 示例代码 1 (行前4个空格) // JQuery 的 Hello, world $(function()&#123; alert(&quot;Hello, world!&quot;) &#125;);效果(行前4个空格)// JQuery 的 Hello, world$(function()&#123; alert(&quot;Hello, world!&quot;)&#125;);示例代码 2 (```) // JQuery 的 Hello, world$(function(){alert(“Hello, world!”)});` 效果 (`) // JQuery 的 Hello, world$(function(){ alert(“Hello, world!”)}); 注意事项： 在代码区块内部，&quot;, &lt;&gt;,&amp; 将会自动转换为转义字符 在代码区块内部，Markdown 标记将保持原样，即：星号(*)就是星号(*)，不被解释为特殊标记，这样就可以不能继续使用 Markdown 语法了 表格语法： 第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符 | 隔开。表格每一行两边的管道符可省略。 第二行还可以为不同的列指定对齐方向。标题默认为居中对齐，内容默认为左对齐；在 - 左边加上 : 就是左对齐；在 - 右边加上 : 就是右对齐；在 - 两边都加上 : 就是居中对齐。 示例代码 姓名|语文成绩|数学成绩|总成绩 ---|:---|:---:|---: 喜羊羊|100|120|220 姓名 语文成绩 数学成绩 总成绩 喜羊羊 100 120 220 其他问题 Markdown 与 HTML 的关系 HTML 是一种发布的格式，Markdown 是一种书写的格式。 Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 在 Markdown 中可直接使用 HTML 标签，但需要注意 对于 HTML 区块元素――如 div、table、pre、p 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符(tab)或空格来缩进 HTML 的行内标签——如 span、cite、del 可以在 Markdown 的段落、列表或是标题里随意使用。 在 HTML 的区块标签中的 Markdown 标签是没有效果的 特殊字符的自动转换 在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp;，必须使用转义字符：&amp; lt ; 和 &amp; amp ; Markdown 中，你可以自由的书写 &lt; 和 &amp;，编辑器会智能的进行判断：当这些符号用于 HTML 标签中，他们将保留原型；当他们单独使用时，将会转换为字符实体。 在代码块中，它们将统统被转换为字符实体，即：原样显示。 Markdown 中的转义字符 Markdown 中，如需显示有特定意义的符号，如：*,# 等，可使用 反斜杠 \ 进行转义。可对如下字符进行转义： * ` *_ {} () # + - . ! 作者：白老师课堂链接：https://www.jianshu.com/p/4e3cae082b47來源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。]]></content>
      <tags>
        <tag>markdown 语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
